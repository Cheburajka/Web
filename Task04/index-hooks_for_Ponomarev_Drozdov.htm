<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Жизненный цикл</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .hook-log {
            margin-bottom: 20px;
            padding: 10px;
            border: 2px solid #42b983;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        }
        .messages {
            margin-top: 20px;
            padding: 10px;
            border: 2px solid #ff6347;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        }
        .message {
            padding: 10px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .message:last-child {
            border-bottom: none;
        }
        button {
            margin-right: 5px;
            padding: 5px 10px;
        }
        .controls {
            margin-top: 20px;
        }
        .edit-input {
            margin-top: 10px;
        }
        h1 {
            text-align: center;
        }
        .log-toggle {
            margin-bottom: 10px;
        }
        .message-toggle {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div id="app">
        <h1>Жизненный цикл vue3.js</h1>
        
        <div class="log-toggle">
            <button @click="toggleLogs">
                {{ showLogs ? 'Скрыть логи' : 'Показать логи' }}
            </button>
        </div>

        <div class="hook-log" v-if="showLogs">
            <h2>Логи жизненного цикла:</h2>
            <ul>
                <li>beforeCreate: {{ logs.beforeCreate }}</li>
                <li>created: {{ logs.created }}</li>
                <li>beforeMount: {{ logs.beforeMount }}</li>
                <li>mounted: {{ logs.mounted }}</li>
                <li>beforeUpdate: {{ logs.beforeUpdate }}</li>
                <li>updated: {{ logs.updated }}</li>
                <li>beforeUnmount: {{ logs.beforeUnmount }}</li>
                <li>unmounted: {{ logs.unmounted }}</li>
            </ul>
            <div class="controls">
                <button @click="triggerBeforeCreate">beforeCreate</button>
                <button @click="triggerCreated">created</button>
                <button @click="triggerBeforeMount">beforeMount</button>
                <button @click="triggerMounted">mounted</button>
                <button @click="triggerBeforeUpdate">beforeUpdate</button>
                <button @click="triggerUpdated">updated</button>
                <button @click="triggerBeforeUnmount">beforeUnmount</button>
                <button @click="triggerUnmounted">unmounted</button>
            </div>
        </div>

        <div class="message-toggle">
            <button @click="toggleMessages">
                {{ showMessages ? 'Скрыть сообщения' : 'Показать сообщения' }}
            </button>
        </div>

        <div class="messages" v-if="showMessages">
            <h2>Сообщения:</h2>
            <div v-if="messages.length === 0">Нет сообщений.</div>
            <div v-else>
                <div class="message" v-for="(message, index) in messages" :key="index">
                    <span>{{ message }}</span>
                    <button @click="changeMessage(index)">Изменить</button>
                </div>
            </div>
            <div class="controls">
                <button @click="addMessage">Добавить сообщение</button>
                <button @click="removeMessage">Удалить сообщение</button>
            </div>
        </div>

        <div v-if="isEditing" class="edit-input">
            <h3>Изменить сообщение {{ editingMessage }}</h3>
            <input v-model="newMessageText" placeholder="Новое сообщение" />
            <button @click="confirmChangeMessage">Изменить</button>
            <button @click="cancelChangeMessage">Отменить измения</button>
        </div>
    </div>

    <script>
        if (typeof Vue === 'undefined') {
            console.error('Vue.js не загружен. Проверьте подключение CDN.');
        } else {
            const { createApp, reactive } = Vue;

            const app = createApp({
                data() {
                    return {
                        logs: {
                            beforeCreate: 'Не выполнено',
                            created: 'Не выполнено',
                            beforeMount: 'Не выполнено',
                            mounted: 'Не выполнено',
                            beforeUpdate: 'Не выполнено',
                            updated: 'Не выполнено',
                            beforeUnmount: 'Не выполнено',
                            unmounted: 'Не выполнено'
                        },
                        messages: [],
                        isEditing: false,
                        editingIndex: null,
                        newMessageText: '',
                        showLogs: true,
                        showMessages: true
                    }
                },
                methods: {
                    addMessage() {
                        const newMessage = `Сообщение ${this.messages.length + 1}`;
                        this.messages.push(newMessage);
                        console.log(`Добавлено: ${newMessage}`);
                    },
                    removeMessage() {
                        if (this.messages.length > 0) {
                            const removed = this.messages.pop();
                            console.log(`Удалено: ${removed}`);
                        } else {
                            console.log('Нет сообщений для удаления.');
                        }
                    },
                    changeMessage(index) {
                        this.editingIndex = index;
                        this.newMessageText = this.messages[index];
                        this.isEditing = true;
                        console.log(`Редактирование сообщения ${index + 1}`);
                    },
                    confirmChangeMessage() {
                        if (this.newMessageText.trim() !== '') {
                            const oldMessage = this.messages[this.editingIndex];
                            this.messages[this.editingIndex] = this.newMessageText.trim();
                            console.log(`Сообщение ${this.editingIndex + 1} изменено с "${oldMessage}" на "${this.newMessageText.trim()}"`);
                            this.isEditing = false;
                            this.editingIndex = null;
                            this.newMessageText = '';
                        } else {
                            alert('Текст сообщения не может быть пустым.');
                        }
                    },
                    cancelChangeMessage() {
                        this.isEditing = false;
                        this.editingIndex = null;
                        this.newMessageText = '';
                        console.log('Редактирование сообщения отменено.');
                    },
                    unmountApp() {
                        app.unmount();
                        console.log('Приложение размонтировано.');
                    },
                    toggleLogs() {
                        this.showLogs = !this.showLogs;
                    },
                    toggleMessages() {
                        this.showMessages = !this.showMessages;
                    },
                    triggerBeforeCreate() {
                        this.logs.beforeCreate = 'Выполнено';
                        console.log('beforeCreate вызван');
                    },
                    triggerCreated() {
                        this.logs.created = 'Выполнено';
                        console.log('created вызван');
                    },
                    triggerBeforeMount() {
                        this.logs.beforeMount = 'Выполнено';
                        console.log('beforeMount вызван');
                    },
                    triggerMounted() {
                        this.logs.mounted = 'Выполнено';
                        console.log('mounted вызван');
                    },
                    triggerBeforeUpdate() {
                        this.logs.beforeUpdate = 'Выполнено';
                        console.log('beforeUpdate вызван');
                    },
                    triggerUpdated() {
                        this.logs.updated = 'Выполнено';
                        console.log('updated вызван');
                    },
                    triggerBeforeUnmount() {
                        this.logs.beforeUnmount = 'Выполнено';
                        console.log('beforeUnmount вызван');
                    },
                    triggerUnmounted() {
                        this.logs.unmounted = 'Выполнено';
                        console.log('unmounted вызван');
                    }
                },
                created() {
                    console.log('created вызван');
                    this.messages.push('Сообщение 1');
                    this.logs.created = 'Выполнено';
                },
                beforeCreate() {
                    console.log('beforeCreate вызван');
                    this.logs.beforeCreate = 'Выполнено';
                },
                beforeMount() {
                    console.log('beforeMount вызван');
                    this.logs.beforeMount = 'Выполнено';
                },
                mounted() {
                    console.log('mounted вызван');
                    this.logs.mounted = 'Выполнено';
                },
                beforeUpdate() {
                    console.log('beforeUpdate вызван');
                    this.logs.beforeUpdate = 'Выполнено';
                },
                updated() {
                    console.log('updated вызван');
                    this.logs.updated = 'Выполнено';
                },
                beforeUnmount() {
                    console.log('beforeUnmount вызван');
                    this.logs.beforeUnmount = 'Выполнено';
                },
                unmounted() {
                    console.log('unmounted вызван');
                    this.logs.unmounted = 'Выполнено';
                }
            });

            app.mount('#app');
        }
    </script>
</body>
</html>